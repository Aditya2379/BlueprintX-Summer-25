.Scikit learn serves more general machine learning purpose with various image feature extraction and processing libraries. 
.It Provides a broader range of algorithms for image processing , including advanced segmentation techniques and feature extraction methods. The choice between openCV and SCIKIT depends on the specific requirements of the application.
.If real -time performance is critical, openCV is the preferred choice. but if the application requires more advanced image analysis techniques and real-time performance is not  a primary concern, scikit -learn may be a suitable alternative.
(https://www.g2.com/compare/opencv-vs-scikit-image)

.It is more user friendly, easier for beginners. (google search)
.It focusses on image processing (filtering, segmentation, etc)
however , open CV focusses on broad computer vision and image processing
it's installation is better than open CV (LIGHTWEIGHT, FEWER DEPENDENCIES)
It's smaller but active.
It's implementation is better than openCV while dealing with noisy and complex images .

Example using scikit-image
from skimage.transform import probabilistic_hough_line
from skimage.feature import canny
from skimage import io, img_as_ubyte
import matplotlib.pyplot as plt

# Load image and apply Canny edge detection
image = img_as_ubyte(io.imread('image.jpg', as_gray=True))
edges = canny(image)

# Detect lines using probabilistic Hough transform
lines = probabilistic_hough_line(edges, threshold=10, line_length=5, line_gap=3)

# Visualize the results
fig, axes = plt.subplots(1, 2, figsize=(15, 5))
axes[0].imshow(image, cmap='gray')
axes[0].set_title('Original Image')

axes[1].imshow(edges, cmap='gray')
for line in lines:
    p1, p2 = line
    axes[1].plot((p1[0], p2[0]), (p1[1], p2[1]), 'r-')
axes[1].set_title('Lines Detected with Scikit-image')

plt.show()
simple and efficient tools for image processing and reusable in various contexts.
Built on the top of Numpy,Scipy,and Matplotlib.(geeks for geeks)

